library(survival)
library(foreign)
library(ggplot2)
library(survminer)
library(rms)
library(flexsurv)
library(dplyr)
library(ciTools)
library(here)
library(visreg)
library(cmprsk)
hurricane <- read.csv("https://github.com/sjsimmo2/Survival/raw/master/hurricane.csv")
head(hurricane)
hurricane <- data.frame(lapply(hurricane, function(x) as.factor(x)))
hurricane$hour <- as.numeric(hurricane$hour)
hurricane$age <- as.numeric(hurricane$age)
hurricane$slope <- as.numeric(hurricane$slope)
hurricane$elevation <- as.numeric(hurricane$elevation)
str(hurricane)
describe(hurricane)
hurricane_missing <- hurricane[rowSums(is.na(hurricane)) > 0,]
hurricane$censor <- ifelse(hurricane$survive == 1, 0, 1)
#Survival Analysis Object
hurricane.surv = Surv(time=hurricane$hour,event=hurricane$censor)
hurricane.km=survfit(Surv(time=hour,event=censor)~1, data = hurricane)
summary(hurricane.km)
plot(hurricane.km, main = "Survival Function", xlab = "Tenure", ylab = "Survival Probability")
#Hazard function
h = hurricane.km$n.event/hurricane.km$n.risk
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(hurricane.km$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
#Cumulative hazard
ggsurvplot(hurricane.km, data = hurricane, fun = "cumhaz", conf.int = TRUE,  palette = "blue", xlab = "Week",
ylab = "Cumulative Hazard", legend = "none")
ggsurvplot(
hurricane.km,
data = hurricane,
size = 1,
palette = "blue",
conf.int = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
ggtheme = theme_bw()
)
#Stratified Survival analysis
reason.surv = survfit(Surv(time=hour,event=censor)~reason, data = hurricane)
ggsurvplot(reason.surv, data=hurricane, palette = c("blue","orange","red","purple","yellow"),conf.int = T)
#Test differences
survdiff(Surv(time=hour,event=censor)~reason, data = hurricane, rho = 0)
survdiff(Surv(time=hour,event=censor)~reason, data = hurricane, rho = 1)
#Hazard function
h = hurricane.km$n.event/hurricane.km$n.risk
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(hurricane.km$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
#Cumulative hazard
ggsurvplot(reason.surv, data = hurricane, fun = "cumhaz", conf.int = TRUE,  palette = c("blue","orange","red","purple","yellow"), xlab = "Week",
ylab = "Cumulative Hazard", legend = "none")
ggsurvplot(
reason.surv,
data = hurricane,
size = 1,
palette =
c("blue","orange","red","purple","yellow"),
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
legend.labs =
c("0", "1", "2", "3", "4"),
risk.table.height = 0.25,
ggtheme = theme_bw()
)
hurricane[hurricane$reason %in% c("0",'1','2','3','4'),]
hurricane[hurricane$reason == "1",]
reason_1 <- hurricane[hurricane$reason == "1",]
View(reason_1)
reason_0 <- hurricane[hurricane$reason == "0",]
reason_1 <- hurricane[hurricane$reason == "1",]
reason_2 <- hurricane[hurricane$reason == "2",]
reason_3 <- hurricane[hurricane$reason == "3",]
reason_4 <- hurricane[hurricane$reason == "4",]
316+115+112+111+116
desc(reason_0)
describe(reason_0)
describe(reason_0$survive)
describe(hurricane$survive)
describe(hurricane$reason)
avg(reason_1$hour)
mean(reason_1$hour)
mean(reason_1$hour)
mean(reason_2$hour)
mean(reason_3$hour)
mean(reason_4$hour)
survdiff(Surv(time=hour,event=censor)~reason, data = hurricane, rho = 0)
#Test differences
logrank <- survdiff(Surv(time=hour,event=censor)~reason, data = hurricane, rho = 0)
summary(logrank)
logrank
h = hurricane.km$n.event/hurricane.km$n.risk
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(hurricane.km$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
h = reason.surv$n.event/reason.surv$n.risk
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(reason.surv$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
#Hazard function
reason.surv$n.risk
ggsurvplot(
reason.surv,
data = hurricane,
size = 1,
palette =
c("blue","orange","red","purple","yellow"),
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
legend.labs =
c("0", "1", "2", "3", "4"),
risk.table.height = 0.25,
ggtheme = theme_bw())
summary(reason.surv)
#Hazard function
reason.surv$n.risk
#Hazard function
reason.surv$n.risk[2,49]
#Hazard function
reason.surv$n.risk[2:49]
#Hazard function
reason.surv$n.risk[2:46]
46+45
reason.surv$n.risk[47:91]
reason.surv$n.risk[47:80]
reason.surv$n.risk[47:70]
reason.surv$n.risk[71:100]
reason.surv$n.risk[71:98]
reason.surv$n.risk[99:]
reason.surv$n.risk[99:,]
h = reason.surv$n.event/reason.surv$n.risk
reason.surv$n.event
reason.surv$n.risk
reason.surv$n.risk[99:120]
reason.surv$n.risk[99:121]
reason.surv$n.risk[99:119]
reason.surv$n.event
i =reason.surv$n.event
f = reason.surv$n.risk
h = reason.surv$n.event[2:46]/reason.surv$n.risk[2:46]
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(reason.surv$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
reason_0 <- hurricane[hurricane$reason == "0",]
reason_1 <- hurricane[hurricane$reason == "1",]
reason_2 <- hurricane[hurricane$reason == "2",]
reason_3 <- hurricane[hurricane$reason == "3",]
reason_4 <- hurricane[hurricane$reason == "4",]
h = reason.surv$n.event[2:46]/reason.surv$n.risk[2:46]
index.h=rep(0,length=(max(reason_1$hour)+1)) #Need to add 0
index.h[(reason.surv$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(reason_1$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
h = reason.surv$n.event[2:46]/reason.surv$n.risk[2:46]
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(reason.surv$time)+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
reason.surv$n.event[2:46]/reason.surv$n.risk[2:46]
reason.surv$time
h = reason.surv$n.event[2:46]/reason.surv$n.risk[2:46]
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(reason.surv$time[2:46])+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h))
colnames(haz.plot)=c("Time","Hazard")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
h = reason.surv$n.event[2:46]/reason.surv$n.risk[2:46]
index.h=rep(0,length=(max(hurricane$hour)+1)) #Need to add 0
index.h[(reason.surv$time[2:46])+1]=h #Because of 0
haz.plot=data.frame(cbind(seq(0,max(hurricane$hour)), index.h,c(1)))
colnames(haz.plot)=c("Time","Hazard", "reason")
ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()
View(haz.plot)
############ HW 2 MACHINE LEARNING ###############
library(tidyverse)
library(ggplot2)
library(UsingR)
library(car)
library(stats)
library(DescTools)
library(AppliedPredictiveModeling)
library(lmtest)
library(MASS)
library(glmnet)
library(vcdExtra)
library(gmodels)
library(InformationValue)
library(naniar)
library(dplyr)
library(caret)
library(leaps)
library(earth)
library(mgcv)
library(ROCR)
library(randomForest)
library(xgboost)
library(Ckmeans.1d.dp)
library(pdp)
#### read in data #####
train <- read.csv("https://github.com/pjokeefe10/Fall-3-HW-Team-Blue-15/raw/main/insurance_t.csv")
train$INS <- factor(train$INS)
# DETERMINE TYPE OF VARIABLES
# str(train)
# var <- sapply(train, n_distinct)
# write.csv(var, "C:/Users/kat4538/Documents/MSA/FALL 3/machine learning/hw 1/var.csv")
##### check which variables have missing #####
gg_miss_var(train) #HMOWN, INV, CCPURC, CC have missing values
##### change missing value to missing category for categorical variables #####
# train$INV[is.na(train$INV)] <- "M"
# train %>% count(INV)
#
# train$CC[is.na(train$CC)] <- "M"
# train %>% count(CC)
#
# train$CCPURC[is.na(train$CCPURC)] <- "M"
# train %>% count(CCPURC)
# coerce all binary and categorical to factor (16 cols)
#convert all categorical var to factors
col_names <- names(train)[c(2,7:8,12,14,18,20,22,24,26:27,29:30,36,38)]
train[,col_names] <- lapply(train[,col_names] , factor)
# create binary flag col for all variables
flag  = train %>%
mutate(across(everything(), ~ is.na(.x),
.names = 'FLAG_NA_{.col}'))
# then drop col if there are no missing values
flag_sub = flag[39:ncol(flag)][colSums(abs(flag[39:ncol(flag)]), na.rm = TRUE) > 0]
# then drop all cols that are not numerical (because we only want the flag for numerical variables)
drop_flag = c('FLAG_NA_DDA','FLAG_NA_DIRDEP','FLAG_NA_NSF','FLAG_NA_SAV'
,'FLAG_NA_ATM','FLAG_NA_CD','FLAG_NA_IRA','FLAG_NA_INV','FLAG_NA_MM','FLAG_NA_MMCRED',
'FLAG_NA_CC','FLAG_NA_CCPURC','FLAG_NA_SDB','FLAG_NA_INAREA','FLAG_NA_INS', 'FLAG_NA_BRANCH')
drop_vars <- names(flag_sub) %in% drop_flag
flag_sub_sub <- flag_sub[!drop_vars]
# add flags back to original data frame
train <- cbind(train, flag_sub_sub)
########## impute missing values ###########
# mode for categorical var
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
train$INV <- if_else(is.na(train$INV), calc_mode(train$INV), train$INV)
train$CC <- if_else(is.na(train$CC), calc_mode(train$CC), train$CC)
train$CCPURC <- if_else(is.na(train$CCPURC), calc_mode(train$CCPURC), train$CCPURC)
# median for continuous var
train <- train %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), median(x, na.rm = T), x))
##### check each variable for separation problems #####
# create list of categorical variable names
all <- names(train)[c(2,7:8,12,14,18,20,22,24,26:27,29:30,36,38)]
# print table for each column against INS
for(i in all){
table_temp <- train %>%
dplyr::select(INS, i) %>%
table()
print(table_temp) #MMCRED has quasi-separation
}
# roll up categories
train$MMCRED <- as.character(train$MMCRED)
train$MMCRED[which(train$MMCRED > 2)] <- "3+" # new category for 3+ money market credits
table(train$INS, train$MMCRED)
train.df <- as.data.frame(train)
train.df$random <- rnorm(8495)
# Random Forest model
set.seed(444)
rf.bank <- randomForest(INS ~ ., data = train.df, ntree = 500, importance = TRUE)
# Plot the change in error across different number of trees
plot(rf.bank, main = "Number of Trees Compared to MSE")
# Tune an random forest mtry value
set.seed(444)
tuneRF(x = train.df[,-37], y = train.df[,"INS"],
plot = TRUE, ntreeTry = 500, stepFactor = 0.5)
set.seed(444)
rf.bank <- randomForest(INS ~ ., data = train.df, ntree = 500, importance = TRUE)
# Plot the change in error across different number of trees
plot(rf.bank, main = "Number of Trees Compared to MSE")
set.seed(444)
rf.bank <- randomForest(INS ~ ., data = train.df, ntree = 200, mtry = 7, importance = TRUE)
varImpPlot(rf.bank,
sort = TRUE,
n.var = 15,
main = "Order of Variables")
importance <- importance(rf.bank, type = 1)
importance2 <- importance(rf.bank, type = 2)
View(importance)
############ HW 2 MACHINE LEARNING ###############
library(tidyverse)
library(ggplot2)
library(UsingR)
library(car)
library(stats)
library(DescTools)
library(AppliedPredictiveModeling)
library(lmtest)
library(MASS)
library(glmnet)
library(vcdExtra)
library(gmodels)
library(InformationValue)
library(naniar)
library(dplyr)
library(caret)
library(leaps)
library(earth)
library(mgcv)
library(ROCR)
library(randomForest)
library(xgboost)
library(Ckmeans.1d.dp)
library(pdp)
#### read in data #####
train <- read.csv("https://github.com/pjokeefe10/Fall-3-HW-Team-Blue-15/raw/main/insurance_t.csv")
train$INS <- factor(train$INS)
# DETERMINE TYPE OF VARIABLES
# str(train)
# var <- sapply(train, n_distinct)
# write.csv(var, "C:/Users/kat4538/Documents/MSA/FALL 3/machine learning/hw 1/var.csv")
##### check which variables have missing #####
gg_miss_var(train) #HMOWN, INV, CCPURC, CC have missing values
##### change missing value to missing category for categorical variables #####
# train$INV[is.na(train$INV)] <- "M"
# train %>% count(INV)
#
# train$CC[is.na(train$CC)] <- "M"
# train %>% count(CC)
#
# train$CCPURC[is.na(train$CCPURC)] <- "M"
# train %>% count(CCPURC)
# coerce all binary and categorical to factor (16 cols)
#convert all categorical var to factors
col_names <- names(train)[c(2,7:8,12,14,18,20,22,24,26:27,29:30,36,38)]
train[,col_names] <- lapply(train[,col_names] , factor)
# create binary flag col for all variables
flag  = train %>%
mutate(across(everything(), ~ is.na(.x),
.names = 'FLAG_NA_{.col}'))
# then drop col if there are no missing values
flag_sub = flag[39:ncol(flag)][colSums(abs(flag[39:ncol(flag)]), na.rm = TRUE) > 0]
# then drop all cols that are not numerical (because we only want the flag for numerical variables)
drop_flag = c('FLAG_NA_DDA','FLAG_NA_DIRDEP','FLAG_NA_NSF','FLAG_NA_SAV'
,'FLAG_NA_ATM','FLAG_NA_CD','FLAG_NA_IRA','FLAG_NA_INV','FLAG_NA_MM','FLAG_NA_MMCRED',
'FLAG_NA_CC','FLAG_NA_CCPURC','FLAG_NA_SDB','FLAG_NA_INAREA','FLAG_NA_INS', 'FLAG_NA_BRANCH')
drop_vars <- names(flag_sub) %in% drop_flag
flag_sub_sub <- flag_sub[!drop_vars]
# add flags back to original data frame
train <- cbind(train, flag_sub_sub)
########## impute missing values ###########
# mode for categorical var
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
train$INV <- if_else(is.na(train$INV), calc_mode(train$INV), train$INV)
train$CC <- if_else(is.na(train$CC), calc_mode(train$CC), train$CC)
train$CCPURC <- if_else(is.na(train$CCPURC), calc_mode(train$CCPURC), train$CCPURC)
# median for continuous var
train <- train %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), median(x, na.rm = T), x))
##### check each variable for separation problems #####
# create list of categorical variable names
all <- names(train)[c(2,7:8,12,14,18,20,22,24,26:27,29:30,36,38)]
# print table for each column against INS
for(i in all){
table_temp <- train %>%
dplyr::select(INS, i) %>%
table()
print(table_temp) #MMCRED has quasi-separation
}
# roll up categories
train$MMCRED <- as.character(train$MMCRED)
train$MMCRED[which(train$MMCRED > 2)] <- "3+" # new category for 3+ money market credits
table(train$INS, train$MMCRED)
train.df <- as.data.frame(train)
train.df$random <- rnorm(8495)
set.seed(444)
rf.bank <- randomForest(INS ~ .-NSF - NSFAMT - FLAG_NA_ACCTAGE-, data = train.df, ntree = 200, mtry = 7, importance = TRUE)
